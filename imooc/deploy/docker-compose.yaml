#
# Copyright IBM Corp All Rights Reserved
#
# SPDX-License-Identifier: Apache-2.0
#
version: '2'

services:

# 关注点
# 1. 如何注入系统配置到容器中 环境变量注入 去修改配置
# 2. 端口的映射关系
# 3. 文件的映射

  orderer.imocc.com:
    container_name: orderer.imocc.com
    image: hyperledger/fabric-orderer:x86_64-1.0.0
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug # general.loglevel: debug 日志级别
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 # 服务暴露地址
      - ORDERER_GENERAL_GENESISMETHOD=file # 创世区块注入
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/config/genesis.block # 注入创世区块，所以环境变量替换的时候用的是容器中的地址
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP # 证书相关
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/orderer/msp # 证书相关
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    ports:
      - 7050:7050 # 17050:7050 Order就对外暴露了7050端口
    volumes: # 文件的映射将order的
        - ./config/:/etc/hyperledger/config # 将本地的配置文件映射进去
        # 因为上面只需要genesis，所以我们也可以最小话映射一个创世区块
        #- ./config/genesis.block:/etc/hyperledger/config/genesis.block # 将创世区块映射进去
        # 但msp证书还是需要整个路径映射进去的，因为上面的参数也是整个路径
        - ./crypto-config/ordererOrganizations/imocc.com/orderers/orderer.imocc.com/:/etc/hyperledger/orderer # 将order msp证书路径映射到容器中

  # peer比较多，所以把他的公共参数提取出来了
  peer.base: # peer的公共服务
    image: hyperledger/fabric-peer:x86_64-1.0.0
    environment: # 前缀：CORE 环境变量注入的前缀变成了core而不是ordr
      # docker的服务端注入 将本机的docker server注入到server中 在peer节点中可能会对chaincode做一些编译、启动之类的操作
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_LOGGING_PEER=debug
      # - CORE_CHAINCODE_MODE=dev # 默认是net模式
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer/msp # msp证书（节点证书）
      - CORE_LEDGER_STATE_STATEDATABASE=goleveldb # 状态数据库的存储引擎（or CouchDB）
      # # the following setting starts chaincode containers on the same
      # # bridge network as the peers
      # # https://docs.docker.com/compose/networking/
      # cc与peer节点使用同一个网络 将chaincode的网络与peer节点的网络绑定到一起，如果不设置这个参数的话，链码可能连不上peer节点
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=deploy_default
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    # command: peer node start --peer-chaincodedev=true # 使用dev模式启动链码

  # 针对5个peer节点做不同的配置
  peer0.org0.imocc.com:
    extends:
      service: peer.base
    container_name: peer0.org0.imocc.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.org0.imocc.com # peer id和peer address针对每个端口都是不同的
      - CORE_PEER_LOCALMSPID=Org0MSP
      - CORE_PEER_ADDRESS=peer0.org1.imocc.com:7051
    ports:
      - 7051:7051 # grpc服务端口
      - 7053:7053 # eventhup端口
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/org0.imocc.com/peers/peer0.org0.imocc.com:/etc/hyperledger/peer
    depends_on:
      - orderer.imocc.com

  peer1.org0.imocc.com:
    extends:
      service: peer.base
    container_name: peer1.org0.imocc.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer1.org0.imocc.com
      - CORE_PEER_LOCALMSPID=Org0MSP
      - CORE_PEER_ADDRESS=peer1.org0.imocc.com:7051
    ports:
      - 17051:7051 # 因为都在一个机器上启动，所以此处映射的端口就不同
      - 17053:7053
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/org0.imocc.com/peers/peer1.org0.imocc.com:/etc/hyperledger/peer
    depends_on:
      - orderer.imocc.com

  peer0.org1.imocc.com:
    extends:
      service: peer.base
    container_name: peer0.org1.imocc.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.org1.imocc.com
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_ADDRESS=peer0.org1.imocc.com:7051
    ports:
      - 27051:7051
      - 27053:7053
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/org1.imocc.com/peers/peer0.org1.imocc.com:/etc/hyperledger/peer
    depends_on:
      - orderer.imocc.com

  peer1.org1.imocc.com:
    extends:
      service: peer.base
    container_name: peer1.org1.imocc.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer1.org1.imocc.com
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_ADDRESS=peer1.org1.imocc.com:7051
    ports:
      - 37051:7051
      - 37053:7053
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/org1.imocc.com/peers/peer1.org1.imocc.com:/etc/hyperledger/peer
    depends_on:
      - orderer.imocc.com

  peer2.org1.imocc.com:
    extends:
      service: peer.base
    container_name: peer2.org1.imocc.com
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer2.org1.imocc.com
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_ADDRESS=peer2.org1.imocc.com:7051
    ports:
      - 47051:7051
      - 47053:7053
    volumes:
      - /var/run/:/host/var/run/
      - ./crypto-config/peerOrganizations/org1.imocc.com/peers/peer2.org1.imocc.com:/etc/hyperledger/peer
    depends_on:
      - orderer.imocc.com

  cli: # peer节点客户端，而且一次智能链接到一个peer节点上,之所以要配置一个client服务，是因为所有的交易都是从客户端发起 需要用到User证书
    container_name: cli
    image: hyperledger/fabric-tools
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.org1.imocc.com:7051 # 此处使用的是组织1的peer0,如果需要对组织0 Peer0做操作的话 需要动态修改
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/peer/users/Admin@org1.imocc.com/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/
    command: /bin/bash
    volumes:
      - ./../chaincode:/opt/gopath/src/github.com/chaincode # 链码路径注入 本地编写的智能合约都要需要注入到cli的服务中，然后通过cli服务去安装
      - ./config:/etc/hyperledger/config
      - ./crypto-config/peerOrganizations/org1.imocc.com/:/etc/hyperledger/peer # 此处注入了admin的证书